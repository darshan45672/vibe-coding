generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  INSURANCE
  BANK
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  PAID
}

enum DocumentType {
  MEDICAL_REPORT
  PRESCRIPTION
  SCAN_REPORT
}

enum ReportType {
  DIAGNOSIS_REPORT
  TREATMENT_SUMMARY
  PRESCRIPTION_REPORT
  LAB_REPORT
  SCAN_REPORT
  FOLLOW_UP_REPORT
  DISCHARGE_SUMMARY
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  CONSULTED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  // Relations
  patientClaims Claim[] @relation("PatientClaims")
  doctorClaims  Claim[] @relation("DoctorClaims")

  uploadedDocuments Document[] @relation("UploadedDocuments")

  appointmentsAsPatient Appointment[] @relation("AppointmentPatient")
  appointmentsAsDoctor  Appointment[] @relation("AppointmentDoctor")

  // Patient Reports Relations
  patientReports PatientReport[] @relation("PatientReports")
  doctorReports  PatientReport[] @relation("DoctorReports")

  // Claim Report Attachments
  claimReportAttachments ClaimReport[] @relation("ClaimReportAttachments")

  // Remove: patient, doctor, insurance, bank (not used or modeled separately)

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Appointment {
  id          String            @id @default(cuid())
  patientId   String
  doctorId    String
  status      AppointmentStatus @default(PENDING)
  scheduledAt DateTime
  notes       String?
  createdAt   DateTime          @default(now())

  patient User @relation("AppointmentPatient", fields: [patientId], references: [id])
  doctor  User @relation("AppointmentDoctor", fields: [doctorId], references: [id])

  documents      Document[] // Optional: if reports are tied to appointments
  patientReports PatientReport[] // Reports generated for this appointment
}

model Claim {
  id              String      @id @default(cuid())
  claimNumber     String      @unique
  patientId       String
  doctorId        String?
  status          ClaimStatus @default(DRAFT)
  diagnosis       String
  treatmentDate   DateTime
  claimAmount     Decimal     @db.Decimal(10, 2)
  approvedAmount  Decimal?    @db.Decimal(10, 2)
  description     String?
  notes           String?
  submittedAt     DateTime?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  paidAt          DateTime?
  rejectionReason String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  patient      User          @relation("PatientClaims", fields: [patientId], references: [id])
  doctor       User?         @relation("DoctorClaims", fields: [doctorId], references: [id])
  documents    Document[]
  payments     Payment[]
  claimReports ClaimReport[] // Patient reports attached to this claim

  @@map("claims")
}

model Document {
  id            String       @id @default(cuid())
  claimId       String?
  appointmentId String? // Optional link to appointment
  type          DocumentType
  filename      String
  originalName  String
  url           String
  size          Int
  mimeType      String
  uploadedAt    DateTime     @default(now())
  uploadedById  String?

  // Relations
  uploadedBy  User?        @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  claim       Claim?       @relation(fields: [claimId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@map("documents")
}

model Payment {
  id            String        @id @default(cuid())
  claimId       String
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentDate   DateTime?     // Changed to optional as it should be set when payment is completed
  paymentMethod String?
  transactionId String?
  notes         String?
  processedBy   String?       // User ID who processed the payment
  processedAt   DateTime?     // When the payment was processed
  failureReason String?       // Reason for payment failure
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt

  claim Claim @relation(fields: [claimId], references: [id])

  @@map("payments")
}

model PatientReport {
  id              String     @id @default(cuid())
  patientId       String
  doctorId        String
  appointmentId   String? // Optional link to specific appointment
  reportType      ReportType
  title           String
  description     String
  diagnosis       String?
  treatment       String?
  medications     String? // JSON string or text field for medication details
  recommendations String?
  followUpDate    DateTime?
  documentUrl     String? // Optional file attachment URL
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  patient     User         @relation("PatientReports", fields: [patientId], references: [id])
  doctor      User         @relation("DoctorReports", fields: [doctorId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  // Reports can be attached to claims
  claimReports ClaimReport[]

  @@map("patient_reports")
}

model ClaimReport {
  id         String   @id @default(cuid())
  claimId    String
  reportId   String
  attachedAt DateTime @default(now())
  attachedBy String // User who attached the report to claim

  // Relations
  claim  Claim         @relation(fields: [claimId], references: [id], onDelete: Cascade)
  report PatientReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user   User          @relation("ClaimReportAttachments", fields: [attachedBy], references: [id])

  @@unique([claimId, reportId]) // Prevent duplicate attachments
  @@map("claim_reports")
}
